<html>
<head><title>Флаги и переменные</title> <meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<LINK REL="stylesheet" MEDIA="screen" TYPE="text/css" HREF="../style.css">
<script language="JScript" src="../rec/script.js"></script></head>
<body scroll="no">
<DIV id="buttonMenu">
<SPAN CLASS="options">Разделы:&nbsp;&nbsp;</SPAN>
	<A HREF="#vved" title="Введение" CLASS="button">1</A>
	<A HREF="#fl" title="Условные флаги" CLASS="button">2</A>
	<A HREF="#fl_set" title="Установка флагов" CLASS="button">3</A>
	<A HREF="#fl_us" title="Использование флагов" CLASS="button">4</A>
	<A HREF="#fl_ch" title="Проверка фрагов" CLASS="button">5</a>
	<A HREF="#fl_init" title="Инициализация флагов" CLASS="button">6</a>
	<A HREF="#fl_spec" title="Особые флаги" CLASS="button">7</a>
	<A HREF="#fl_show" title="Показ флагов в сообщениях" CLASS="button">8</a>
	<A HREF="#fl_eq" title="Сравнение флагов" CLASS="button">9</a>
	<A HREF="#var" title="Переменные" CLASS="button">10</a>
	<A HREF="#var_typ" title="Типы переменных" CLASS="button">11</a>
	<A HREF="#var_set" title="Настройка переменных" CLASS="button">12</a>
	<A HREF="#var_us" title="Использование переменных" CLASS="button">13</a>
	<A HREF="#var_cond" title="Сравнение переменных" CLASS="button">14</a>
	<A HREF="#var_ch" title="Проверка переменных" CLASS="button">15</a>
	<A HREF="#var_spec" title="Особые переменные" CLASS="button">16</a>
	<A HREF="#var_init" title="Инициализация переменных" CLASS="button">17</a>
	<A HREF="#var_show" title="Показ переменных" CLASS="button">18</a>
	<A HREF="#var_as_part" title="Переменные как часть сообщений" CLASS="button">19</a>
	<A HREF="#var_ref" title="Косвенные ссылки на переменные" CLASS="button">20</a>
	<A HREF="#var_refs" title="Косвенные ссылки на номер переменной" CLASS="button">21</a>
	<A HREF="#macros" title="Макросы" CLASS="button">22</a>
	<A HREF="#add" title="Дополнительные примеры" CLASS="button">23</a>
	<A style="position:absolute; right:4" href="#UP" CLASS="button" title="Вернуться к началу">&uarr;</a>
</DIV>
<DIV id="text">
<h2 align="center">Флаги и переменные</h2>
<h3><a name="vved"></a>Введение</h3><p>
Флаги и переменные – это наиважнейшая особенность ERM для трансформации Героев в высокодинамичную игру, отвечающую на действия игрока. ERM скрипты могут быть написаны без использования флагов и переменных, но это будет сугубо локальный подход.</p>

<h3><a name="fl"></a>Условные флаги</h3><p>
Флаг – это условный рычаг, который имеет положение Истина (1) или Ложь (0). Как 
и двоичные числа, они имеют только два значения. В начале все флаги установлены 
на Ложь (0). Значение 1 (Истина) обычно называют &quot;установлен&quot;, 0 (ложь) - &quot;не 
установлен&quot;.</p>

<h4><a name="fl_set"></a>Установка флагов</h4><p>
В ERM есть 1000 условных флагов и каждый из них обладает своим номером от 1 до 1000. 
Флаги устанавливаются с помощью ресивера IF, используя <a href="../Rec/IF.htm#V">опцию V</a>. 
Чтобы установить флаг на Истину, используйте значение 1, а чтобы на ложь, значение 0.<br>
<u>Например</u>:
<script type="erm">!!IF:V4/1; установим флаг 4 на Истину (1)</script>
В дополнение к опции V, ещё есть несколько опций ресивера IF (A,S,R) для установки 
первых 10 флагов за раз. Смотрите <a href="../Rec/IF.htm">ресивер IF</a> для подробной информации.</p>

<h4><a name="fl_us"></a>Использование условных флагов</h4><p>
Обычно флаги используют для проверок на что-либо как условие. Например, если вы 
хотите, чтобы при посещении объекта на карте показывалось сообщение <i>только</i> 
в первый раз любому герою, и никогда больше, вы можете использовать флаги для 
этой цели; сообщение будет показываться, если флаг был ложь (не установлен) и 
дальнейшей командой вы изменили его значение на Истину (1), так, если в 
следующий раз объект будет посещён, сообщение не будет показано. Символ для 
определения флага (или переменной) - &amp; (амперсанд), который обязательно 
предшествует значению флага (переменной) в ресиверах, или предшествуя точке с 
запятой в триггерах. Амперсанд указывает, что нужно проверить флаг. Если тест 
для флага-&quot;истины&quot; (т.е. установленного на 1), просто используется номер флага. 
Если тест для флага-&quot;лжи&quot; (т.е. установленного на 0), используют 
минус (-) перед номером. Так, если нужен флаг №5 как Истина, вы должны использовать 
&amp;5, а если флаг нужен как №5 - ложь, вы должны использовать &amp;-5.<br>
<u>Пример кода</u>:
<script type="erm">ZVSE
!?OB10/14/0; - проверим, посещается ли объект в 10/14/0
!!IF&-5:M^Входи. Я ждал тебя.^; - показать это сообщение, если флаг №5 - ложь
!!IF:V5/1; - установить флаг №5 на истину</script></p>

<h4><a name="fl_ch"></a>Проверка нескольких флагов</h4><p>
Иногда вам требуется проверить более одного флага или переменных. Чтобы сделать 
это, отделите каждый флаг (переменную) слэшем (<span class="key">/</span>). Если существует несколько 
флагов или переменных для проверки, все условия должны быть выполнены перед 
выполнением ресивера. Например, если вы хотите, чтобы действовало, когда флаг 
№7 - истина, флаг №8 - ложь, и флаг 10 - истина, если хоть один из флагов будет 
иметь другое значение, сообщение не появится.<br>
<u>Пример кода</u>:
<script type="erm">ZVSE
!?OB10/14/0; - проверим, посещается ли объект в 10/14/0
!!IF&7/-8/10:M^Входи. Я ждал тебя.^; - данное сообщение будет показано, только если флаги 7 и 10 будут истиной, а флаг 8 - ложью.</script></p>

<h4><a name="fl_init"></a>Инициализация флагов</h4><p>
При инициализации флаги 1..500 будут сброшены на Ложь (0), но флаги 501..1000 
будут хранить своё последнее значение, если вы начали новую карту без 
перезапуска самой игры. Они могут быть использованы для кампаний, в которых вы 
хотите использовать значения флагов для последующих карт в кампаниях. Если вы 
избегаете потенциальной возможности того, что флаги будут отличатся от лжи (т.е, 
вам нужно, чтобы все флаги были 0), установите флаги от 500 и дальше на 0 в 
начале карты (или в начале скрипта (команда <a href="../Rec/IF.htm#V">IF:V</a>)), которые вы хотите 
использовать.</p>

<h4><a name="fl_spec"></a>Особые флаги</h4><p>
Некоторые флаги имеют специализированные значения в игре.<br>
<b>Флаг 1</b> используется некоторыми командами для хранения результата и 
определения результата условных флагов (проверить значение) (см. выше). 
Следовательно, не рекомендуется использовать флаг 1 для необходимых в дальнейшем 
значений. Или, для верности, не используйте этот флаг вообще, ведь есть и другие.</p>
<p><b>Флаг 996</b> автоматически очищается (устанавливается на ложь), когда выполняется 
любая опция !!LE и устанавливается на 1 (истина) если там (в локации, 
определённой командой LE) нет локального события (помните, что события исчезают 
после первого посещения).</p>
<p><b>Флаг 997</b> и <b>998</b> хранят следующее:<br>
<b>Флаг 997</b> хранит мультиплеерный статус битвы.<br>
= 0 (ложь), если это битва на данном компьютере,<br>
= 1 (истина), если это интернет-битва.</p>
<p>Если <b>флаг 997</b>=1, тогда <b>флаг 998</b>=0, ИИ атакует игрока-человека на другом 
компьютере.<br>
Заметьте, что битва запускается только на одном ПК, но этот ПК удалён от 
текущего активного игрока.<br>
Флаг <b>998=1</b>, если битва Человек на Человека. Здесь у нас реальная мультиплеерная 
битва.</p>
<p>Вы можете использовать оба флага в триггерах BA0 или BA50, например:</p>
<script type="erm">!?BA0&997/998; Скрипт сработает, если это битва Человек на Человека (мультиплеер)
...</script>
<p><b><a name="999"></a>Флаг 999</b>, который устанавливается на 1, если текущий игрок (который активировал 
триггер) - игрок &quot;здесь&quot; и 0, если он или она на другом ПК. ИИ имеет всегда 
значение 0. Если флаг 999 установлен, вы можете быть уверены, что эта битва - 
человек против ИИ, причём человек за данным компьютером. Работает для всех 
триггеров.<br>
Однако, учтите, что для сетевой битвы в бою флаг 999=1 только для той стороны, кто был инициатором битвы. Для другой стороны флаг 999 всегда будет установлен на ложь, даже если в битве его ход.</p>
<p><b>Флаг 1000</b> имеет два значения, зависящих от места использования (триггер битвы 
или нет). Для не-битвы этот флаг будет установлен на истину, когда хозяин героя, 
игрок-человек, посетит объект на карте, триггер, как объект или субъект. Если 
компьютерный (ИИ) герой посетил объект, флаг 1000 будет установлен на ложь. 
Опять же, вы можете установить значение этого флага, но это не безопасно, 
поскольку вы можете проверить это значение в определённом скрипте, герой ли 
игрока или ИИ.<br>
Поэтому, если проверять условные флаги, -1000 значит ИИ, а 1000 значит человек.<p>
Для боевых триггеров (например, <a href="../Tr/BA.htm">!?BA</a>, 
<a href="../Tr/BG.htm">!?BG</a>, <a href="../Tr/BF.htm">!?BF</a>, и т.д.) флаг 1000 проверяет, 
настоящая или теоретическая (ИИ) битва. Если флаг 1000=1 (истина), это значит, 
что битва настоящая (как минимум имеется один оппонент-человек). Если 1000=0 
(ложь), это значит, что теоретическая ИИ-битва.</p>

<h4><a name="fl_show"></a>Показ значений флагов в сообщениях</h4><p>
Чтобы показать значение флага (0 или 1) в сообщении, используйте <b>%F</b>, далее - 
номер флага для показа статуса (1..1000). Для показа значения флага №4 в 
сообщении, вы должны использовать %F4. Показ значения флага может быть полезен 
как средство помощи в отладке неработающего скрипта.<br>
<u>Пример</u>:
<script type="erm">!!IF:M^Значение флага 4 равно %F4.^;</script></p>

<h4><a name="fl_eq"></a>Сравнение значений</h4><p>
Для сравнения игровых параметров к определённому значению, вы можете 
использовать следующий способ: &hellip;[знак сравнения] значение&hellip;<br>
Результат сравнения записывается во флаг 1. Вы можете использовать это для 
дальнейших сообщений.</p><p>
Пример сравнения значений, используя <a href="../Rec/GE.htm">ресивер GE</a>:<br>
!!GE100:F5 – установить день первого появления: 5 для Глобального события (стандартный синтаксис).<br>
!!GE100:F=5 – проверить, если день первого появления 5 и установить условный флаг 1 на 0, если не так, на 1, если верно.<br>
!!GE100:F&lt;&gt;5 – проверить, если день первого появления не 5 и установить условный флаг 1&nbsp; на 0, если не так, на 1, если верно.<br>
!!GE100:F&gt;&lt;5 – см. предыдущее описание.<br>
!!GE100:F&gt;5 – проверить, если день первого появления более 5 и установить условный флаг 1 на&hellip;<br>
!!GE100:F&gt;=5 – проверить, если день первого появления более или равный 5 и становить условный флаг 1 на&hellip;<br>
!!GE100:F=&gt;5 – см. предыдущее описание.<br>
!!GE100:F&lt;5 – проверить, если день первого появления менее 5 и установить условный флаг 1 на&hellip;<br>
!!GE100:F&lt;=5 – проверить, если день первого появления меньше или равен 5 и установить условный флаг 1 на&hellip;<br>
!!GE100:F=&lt;5 – см. предыдущее описание.</p>
<blockquote id="Q2">Для WoG 3.58f существует баг с проверками. Корректно сравнивают лишь проверки =, &gt;, &gt;=. Остальные же должны 
сравниваться через запись в переменную, потому что расцениваются движком игры некорректно.</blockquote>

<h3><a name="var"></a>Переменные</h3><p>
Переменные похожи на флаги, т.к. они могут быть установлены и проверены, но 
отличаются от них тем, что они могут принимать гораздо большее кол-во 
значений, чем истина и ложь. В большинстве случаев, переменные используют вместо 
какого-либо числа. Также, содержимое переменных (установленные значения) могут 
быть изменены в любое время простым установлением нового значения. Есть ещё 
несколько различных типов переменных, которые могут быть использованы для 
различных заданий в скрипте.<p>
Если параметр команды показывается как $, это значит, что это значение может 
быть записано в переменную. Если параметр показан как #, это значит, что его 
можно только установить, но не прочитать. И если он показан как ?$, это значит, 
что параметр можно прочитать, но не установить.</p>

<h4><a name="var_typ"></a>Типы переменных и их возможные значения</h4><p>
Все числовые переменные варьируются в значениях от -2147483647 до +2147483647<br>
a - пока не используется<br>
b - пока не используется<br>
c - хранит значение текущего дня (номер игрового дня)<br>
d - добавляет или убавляет значения от переменной<br>
<a href="#e">e1&hellip;e100</a> - переменные с плавающей запятой<br>
<a href="#y-">e-1&hellip;e-100</a> - основные триггерные переменные с плавающей запятой<br>
<a href="#v">f&hellip;t</a> - стандартные переменные (ещё называются быстрыми переменными)<br>
<a href="#v">v1&hellip;v10000</a> - стандартные переменные<br>
<a href="#w">w1&hellip;w200</a> - переменные героя (уникальны для каждого героя)<br>
<a href="#x">x1&hellip;x16</a> - параметры функции (зависит от функции)<br>
<a href="#y">y1&hellip;y100</a> - функциональные переменные (уникальны для каждой функции)<br>
<a href="#y-">y-1&hellip;y-100</a> - основные триггерные переменные<br>
<a href="#z">z1&hellip;z1000</a> - текстовые переменные<br>
<a href="#z-">z-1&hellip;z-10</a> - функциональные текстовые переменные (уникальны для каждой функции)</p>

<h4><a name="var_set"></a>Запись переменных</h4>
<p>Есть несколько путей записи переменных.<br><a href="../Rec/VR.htm">Ресивер VR</a> может быть использован для 
установки значения любой переменной и может быть ещё использован для 
<a href="../Rec/VR.htm#Mat">арифметических</a> операций с переменными, такими как сложение, вычитание, умножение 
или деление.
<blockquote id="Q2"><b>Исключение</b> – переменные <i>z</i>, которые используются только для установления 
текста, в отличии от числовых переменных.</blockquote>
Пример установки значение 17 переменной v5:
<script type="erm">!!VRv5:S17;</script></p>
<p>Второй путь записи значений в переменные - это считывание значений с объектов 
или установок игры, таких, как номер героя, значение золота, кол-во драг. 
камней у игрока 4, или тип или подтип любого объекта. Для установки значения 
через этот путь, после команды используется знак вопроса (?), далее следует 
переменная, в которой и будет храниться значение.<br>
<u>Примеры</u>:
<div id="step">Установка типа объекта в координатах x=10, y=15, уровень=1 (подземелье) в 
переменную j:<script type="erm">!!OB10/15/1:T?j;</script></div>
<div id="step">Установка кол-ва кристаллов (тип ресурса = 4), которые на данный 
момент есть у зелёного игрока (номер 3) в переменную v12:<script type="erm">!!OW:R3/4/?v12;</script></div></p>
<p>Третий способ установки переменной - внутренняя ссылка. Некоторые ERM команды 
требуют номер <i>v</i> или <i>z</i>-переменной, а не букву. В этом случае, вместо 
использования знака вопроса, вы просто вводите номер параметра и значение 
командой для данной переменной (например, если команде нужен номер для 
<i>v</i>-переменной, вы ставите значение 17, которое будет установлено в переменную 
v17).</p>

<h4><a name="y-"></a>Триггерные локальные переменные</h4><p>
y-1&hellip;y-100 - целые переменные<br>
e-1&hellip;e-100 - переменные с плавающей запятой<br>
Вы можете использовать эти переменные там, где <i>y</i> и <i>e</i>-переменные могли использоваться раньше.<br>
Характерные особенности:
<ol id="T0">
<li>Они НЕ сохраняются при сохранении игры. Фактически, каждая секция триггера будет полностью завершена, 
и вы не сможете сохранить и загрузить игру в работе триггера.</li>
<li>Эти переменные различны для каждого триггера, и если один триггер работает внутри другого, 
они будут иметь разные значения этих переменных. 
Вы не можете передавать значения из триггера к триггеру используя эти переменные.</li>
<li>Все эти переменные установлены на 0 при старте любого триггера.</li>
<li>Все функции, вызванные из одного триггера, смогут обмениваться этими переменными, 
т.к. они завязаны на триггере, но не на функции.</li>
</ol></p>

<h4><a name="var_us"></a>Использование переменных вместо чисел</h4><p>
Раз вы можете устанавливать значения переменных, вы можете использовать эти 
переменные вместо чисел своего кода. Почти везде, где вы можете просто ввести 
число, вы можете использовать любую переменную, содержащую значение, которое 
будет использоваться, если оно приемлемо по диапазону значений опции. Исключения 
- это переменные <i>z</i>, использующиеся для текстовых значений, таких, как имя героя, 
название артефакта, или слово или фраза. Очевидно, что они должны будут 
использоваться с командами, отличными от числовых.<br>
Пример использования <i>v</i>-переменных для установки баллов заклинания героев:
<script type="erm">!!VRv200:R50; - генерировать случайное значение между 0 и 50 в переменную v200
!!HE155:Iv200; - установить герою № 155 баллы заклинания на значение, сгенерированное в переменной v200</script>
Пример использования <i>z</i>-переменных: добавление &quot;Сэр&quot; к имени героя:
<script type="erm">!!VRz50:S^Сэр ^; - установить слово "Сэр" в переменную z50
!!HE-1:B0/?z51; - установить текущее имя героя в переменную z51
!!VRz52:S50 +z51; - добавить содержимое z51 к z50 и записать в переменную z52
!!HE-1:B0/z52; - установить текущему герою имя, находящееся в переменной z52</script>
<i id="bold">Замечание:</i> оба предыдущих примера кода должны иметь триггер.</p>

<h4><a name="var_cond"></a>Условия с переменными</h4><p>
Как и флаги, вы можете использовать значения одной или более переменных как 
условия. Принцип действия тот же, однако, вместо номера флага (со знаком минус впереди или без него) вы вводите имя переменной. Далее, за знаком сравнения (=, &gt;, &lt;, &lt;&gt;, &gt;= или &lt;=) – число (или переменную), с чем вы хотите сравнить.
<p>Пример условия, если v1 больше либо равно 7, показать сообщение:
<script type="erm">!!IF&v1>=7:M^Вы были мудры, сделав этот выбор, герой!^;</script></p>
<p>Пример условия, сравнивающего текст, установленный в переменную z1, с текстом в переменной z2, 
и если они одинаковы, показать сообщение:
<script type="erm">!!IF&z1=z2:M^Вы ввели одинаковые значения!^;</script></p>

<h4><a name="var_ch"></a>Проверка нескольких переменных</h4><p>
Выполняется тем же путём, что и с флагами, отделяя каждое условие слэшем (<span class="key">/</span>). Вы 
можете смешивать и сравнивать флаги и переменные в одном условии, как в примере 
ниже, который даёт текущему герою артефакт Магические Доспехи, но только если 
выполнены условия (установлены флаги и переменные с определённым значением):
<script type="erm">!!HE-1&7/v2>6/-1/y4=v8:A31;</script></p>
<p>В примере выше героя получит артефакт, только если выполнятся все указанные условия:
<ol id="T0">
<li> Флаг 7 должен быть Истиной (1);</li>
<li> Значение в переменной v2 должно быть больше 6;</li>
<li> Флаг 1 должен быть ложью (0);</li>
<li> Значения переменных y4 и v8 должны быть равными.</li></ol>
</p>

<h4>Синтаксис проверки - условие ИЛИ: |</h4><p>
!(!|?|#)XX&amp;c1/c2/c3|c4/c5/c6:&hellip;;<br>
Полное условие будет таким: (c1 И c2 И c3) ИЛИ c4 ИЛИ c5 ИЛИ c6<br>
<u><b>Комментарий:</b></u><br>
- секция ИЛИ может быть одна, либо обязательно после секции И<br>
- если есть только секция ИЛИ, полное условие будет истиной, если хотя бы одно 
состояние ИЛИ - истина<br>
- может быть до 16 условий И и до 16 условий ИЛИ</p>

<h3><a name="var_another"></a>Другие типы переменных</h3><p>
Как ранее упоминалось, есть несколько различных типов переменных, каждая 
используется для разных нужд кода.</p>
<p><b><a name="v"></a>Стандартные переменные (f-t) и (v1-v10000)</b> могут 
использоваться практически повсеместно, но определённые команды требуют номер 
<i>v</i>-переменной для записи результата. Оба типа используются для записи целых 
значений.</p><p>
<b><a name="w"></a>Переменные героев (w1-w200)</b> хранят тот же тип информации, что и 
<i>v</i>-переменные, но они уникальны для каждого героя, Т.е. два разных героя могут 
иметь разные значения, записанные в их переменных w1 (или w2, w10 или более.. до 
w200). Для установки или проверки одной или более <i>w</i>-переменных вы сначала должны 
установить номер героя, у которого будет браться значение командой IF:W.<br>
Например, если вы хотите установить или проверить w5 героя 27 (Джем), вы сначала должны вставить
<script type="erm">!!IF:W27;</script>перед ресивером(-ами), работающими с переменной w5.<br>
Для текущего героя используйте -1 вместо номера. Так,
<script type="erm">!!IF:W-1;</script>
означает, что следующие обращения к переменным w относятся к текущему герою (до использования другой команды IF:W)<br>
См. также: <a href="../Rec/IF.htm#W">IF:W</a>, <a href="../Rec/VR.htm">ресивер VR</a><br>
<blockquote id="Q2"><b>Исключение:</b> команда <a href="../Rec/HT.htm#w">!!HT:W</a>, где можно использовать только первые 100 <i>w</i>-переменных.</blockquote>
<p><b><a name="x"></a>Переменные - параметры функции (x1-x16)</b> также хранят те же типы значений, 
что и переменные v и w (числовые). Но данные переменные существуют лишь внутри 
функций (кода после триггера функции) и пропускают в функцию значения командой P 
(P - параметры). См. <a href="../Rec/FU.htm">ресивер FU</a> для детальной информации о функциях. Если вы 
вызываете функцию из другой функции, любые <i>x</i>-переменные, которые не были 
установлены (как новые параметры), хранят своё старое значение в новой функции. 
Когда используются с <a href="../Rec/DO.htm">ресивером DO</a>, параметр x16 хранит номер круга функции.</p>
<p>
<b><a name="y"></a>Локальные переменные (y1-y100)</b> похожи на <i>x</i>-переменные тем, что 
используются лишь в функциях. Но они уникальны для каждой функции, так, если вы 
имеете 4 разных функции, каждая имеет своё значение переменной y. Как 
большинство других переменных, они хранят только числовые значения. Также эти 
переменные могут быть использованы вне функции, но помните, что при срабатывании 
другого триггера (<a href="../Tr/HL.htm">HL</a>, <a href="../Tr/BA.htm">BA</a> и т.д.) в середине вашего скрипта, значения этих 
переменных могут уничтожиться.</p>
<p>
<b><a name="e"></a>Переменные с плавающей запятой (e1..e100)</b> Они используются в основном как <i>y</i>-переменные:
<dl><dd>- не записываются в сохранённой игре;</dd>
<dd>- уникальны для каждой функции;</dd>
<dd>- установлены на 0 при старте каждой функции/круга функции;</dd>
<dd>- восстанавливаются при выходе с другой функции.</dd></dl>
Вы можете использовать их для установки параметров, но главная особенность - 
использование выражений с плавающими запятыми и их дальнейшая запись в целое число.<br>
Вы можете использовать <a href="../Rec/VR.htm#Mat">арифметические</a> операции <a href="../Rec/VR.htm">ресивера VR</a> для <i>e</i>-переменных с плавающей запятой, но все числа в выражении должны быть целыми.<br>
Вы также можете показать значение <i>e</i>-переменной в сообщении, используя команду 
%E#. В этом случае будет показано только 3 знака после запятой.</p>
<blockquote id="Q2">Баг - ERM не обрабатывает нестрогие сравнения <i>e</i>-переменных: &lt;=, &gt;=, =&gt;, =&lt;.</blockquote>
<u>Пример</u>:
<script type="erm">!#VRe5:S32;
!#IF:M^e5 теперь имеет значение "%E5"^; [ e5=32.0 ]
!#VRe5:*5;
!#IF:M^e5 теперь имеет значение "%E5"^; [ e5=160.0 ]
!#VRe5::200;
!#IF:M^e5 теперь имеет значение "%E5"^; [ e5=0.8 ]
!#VRe5:+e5*10+5:10;
!#IF:M^e5 теперь имеет значение "%E5"^; [ e5=2.1 ]
!#VRv100:Se5;
!#IF:M^v100 теперь имеет значение "%V100"^; [ v100=2 ]</script></p>
<p>
<b><a name="z"></a>Текстовые переменные (z1-z1000)</b> хранят символы (один или более) и не 
могут быть использованы для записи числовых переменных; они могут записывать 
число как текст, но число нельзя будет приравнять или выполнить с ним 
арифметические действия в любом виде. <i>z</i>-переменные могут быть соединены, но 
имеют ограничение в 512 символов каждая. Они могут быть сравнены с другими 
<i>z</i>-переменными. Когда сравниваются две <i>z</i>-переменных, сравнение 
НЕ зависит от регистра. Так, если в переменной z1 записано &quot;Это&quot;, она 
будет равна переменной z2, в которой записано &quot;эТО&quot; или любая другая комбинация 
больших и малых символов. При сравнении пустые линии или строки <i>z</i>-переменных 
игнорируются. 500 новых <i>z</i>-переменных добавлено в ERM 2.60 (WoG 3.57) к уже 
существующим 500, но помните, что z501-z1000 не сохраняют своё значение между 
разными картами.<br>
Для этого используйте z301-z500.<br>
Замечание: сообщения в тестовых переменных не должны содержать символов ; и ^<br>
<u>Пример</u>:
<script type="erm">!!VRz567:S^Неправильный текст ; Он содержит ^специальные элементы^. ^;
!!VRz567:S^Это правильный текст. Он не содержит "специальных элементов". ^;
!!IF:M^Это правильный текст. Он не содержит специальных элементов. ^;</script></p>
<p>
<b><a name="z-"></a>Локальные текстовые переменные (z-1-z-10)</b> аналогичны <i>y</i>-переменным, но 
записывают значение как <i>z</i>-переменные. Если вы установить одну&nbsp; затем 
вызовете функцию или круги функций, устанавливающие другие значения, при 
возвращении к начальной функции вы получите значение переменной, равной 
установленной до вызова функции. Так вы можете использовать передачу переменной 
от функции к функции, но не можете использовать возвращённое значение. Как 
обычные <i>z</i>-переменные, они ограничены 512 символами.</p>

<h4><a name="var_spec"></a>Специальные переменные</h4><p>
В ERM есть несколько переменных, имеющих специальное значение. Как флаги 1 и 
1000, специальные переменные могут установлены как вы захотите и в любое время, 
но это не рекомендуется, т.к. есть риск, что другие команды могут использовать 
их.</p><p>
<b>Переменная v1</b> используется для записи результата некоторых команд. Это не 
частое явление, вы можете использовать её в своих скриптах для хранения 
выражения, но на непродолжительное время; другими словами, не устанавливайте 
значение в переменную v1, если вы хотите хранить её значение неизменным долгое 
время.</p><p>
<b>Переменная z1</b> используется для записи текста, введенного игроком в 
расширенном окне диалога. Если вы не используете расширенные диалоговые окна, вы 
можете не беспокоиться об этом, но всё же лучше не использовать z1 для 
долговременного хранения.</p><p>
<b>Переменные v998, v999, и v1000</b> всегда записывают позицию объекта или 
события, которое посетил текущий герой, или координаты героя (например, в 
триггере !?HM). Лучше оставить эти переменные исключительно для сравнения их 
значений или копировать их значения в другие переменные.</p><p>
<b>Переменная x16</b> (используется в функциях, вызываемых 
<a href="../Rec/DO.htm">ресивером DO</a>), 
хранит текущий номер круга функции. Например, если функция повторяется 12 раз 
(от 1 до 12), первый раз x16 будет равна значению 1, второй раз - 2 и т.д. Если 
вы измените значение переменной x16, вы сможете &quot;ускорить&quot; или &quot;замедлить&quot; 
выполнение функции, или выйти из функции, установив значение x16 на конечное 
значение (или большее), использованное в ресивере DO.</p>

<h4><a name="var_init"></a>Инициализация переменных</h4><p>
Как и флаги, все переменные в начале игры имеют значение 0. Однако, как и флаги, 
некоторые переменные НЕ будут сброшены между картами без перезапуска 
самой игры. Опять же, это может помочь вам в создании кампаний.<p>
Когда вы начинаете игру, следующие переменные будут установлены на 0 или примут 
пустое значение &quot;&quot; (для <i>z</i>-переменных): f&hellip;t, v1&hellip;v500, v1001-v10000, 
z1&hellip;z300, z501-z1000, w1-w50.<p>
Следующие переменные будут сохранять своё текущее значение между играми (только 
если вы не перезапустите игру): v501-v1000, z301-z500, w51-w200.</p>

<h4><a name="var_show"></a>Показ переменных в сообщениях</h4><p>
Значения переменных (и флагов) могут быть показаны в сообщениях, используя специальный код для каждого типа переменной:<p>
%F# &rarr; показать текущее состояние флага #<br>
%V# &rarr; показать значение <i>v</i>-переменной (# = 1..10000)<br>
%V@ &rarr; показать значение "быстрой" переменной (@ = f&hellip;t)<br>
%W# &rarr; показать значение переменной героя (# = 1&hellip;200)<br>
%X# &rarr; показать значение переменной-параметра функции (# = 1&hellip;16)<br>
%Y# &rarr; показать значение функциональной переменной <i>y</i> (# = 1&hellip;100)<br>
%Z# &rarr; показать текстовую переменную <i>z</i> (# = 1&hellip;500)<br>
%$macro$ &rarr; показать знчение переменной, ассоциируемой с макро-именем &quot;macro&quot;</p><p>
<i id="bold">Замечание:</i> для показа значения переменных всегда используются большие буквы после знака %, 
и только в отношении к быстрым переменным используются всегда маленькие буквы.
<br>Пример показа сообщения с быстрой переменной <i>j</i>, обычной переменной v21 и 
<i>z</i>-переменной z100 в текстовой переменной:
<script type="erm">!!IF:M^Простите, %Z100, но вы имеете только %Vj золота, вам нужно %V21 золота для покупки этого артефакта.^;</script>
Здесь подразумевается, что в переменной z100 хранится имя героя (скажем, это Клэнси), в переменной j хранится кол-во золота у игрока (скажем, 750), переменная v21 содержит цену артефакта (скажем, 2000), а сообщение будет выглядеть так:</p>
<blockquote id="T0"><table><tr><td id="dl">Простите, Клэнси, но вы имеете только 750 золота, вам нужно 2000 золота для покупки этого артефакта.</td></tr></table></blockquote>
<h4><a name="var_as_part"></a>Внедрение переменных как часть текстовых переменных</h4><p>
Используя команды для показа сообщений (см. выше), вы можете добавлять переменные как часть текстовой переменной. 
Это удобный способ контакта с <i>z</i>-переменной.</p><p>
Пример комбинирования нескольких <i>z</i>-переменных и <i>v</i>-переменных вместе в одной <i>z</i>-переменной:
<script type="erm">!!VRz10:S^Клэнси^; - установить в z10 значение "Клэнси"
!!VRz11:S^зелёную^; - установить в z11 значение "зелёный"
!!VRz12:S^красная^; - установить в z12 значение "красный"
!!VRv25:S1 R1000; - установить случайное значение от 1 до 1000 в переменную v25
!!VRz100:S^%Z10 всегда хотел иметь %Z11 лошадь, но его лошадь была %Z12.
Ему было %V25 лет, и %Z10 никогда не видел %Z11 лошадь за всю свою жизнь!^; - установить этот текст в переменную z100
!!IF:M^%Z100.^; - показать текст, записанный в переменной z100</script>
Здесь подразумевается генерация случайного числа и запись его в переменную v25 
(пусть будет 247), игроку будет показано следующее сообщение:</p>
<blockquote id="T0"><table><tr><td id="dl" align="center">Клэнси всегда хотел иметь зелёную лошадь, но его лошадь была красная.<br>
Ему было 247 лет, и Клэнси никогда не видел зелёную лошадь за всю свою жизнь!</td></tr></table></blockquote>

<h4><a name="var_ref"></a>Косвенные ссылки на переменные</h4><p>
Ресиверы, требующие координаты на карте (X, Y и Уровень) в теле ресивера, могут быть 
использованы с косвенными ссылками на переменные. Это одно число, которое идёт 
первым и последующие <i>v</i>-переменные содержат X, Y и Уровень для использования. 
Например, если у вас значение X записано в переменную v100, Y - в v101 и Уровень 
в v102, вы можете использовать число 100 в ресивере для точки, находящейся в этих координатах.<br>
<u>Пример использования локальных событий с косвенными ссылками</u>:
<script type="erm">!!VRv100:S10; - число, используемое как x
!!VRv101:S15; - число, используемое как y
!!VRv102:S0; - число, используемое как уровень
!!LE100:M^Странно... Здесь нет ни звука жизни.^; - установить сообщение в событии, координаты которого лежат в значениях v100, v101, v102</script></p>
<h3><a name="var_refs"></a>Косвенные переменные</h3>
<p>Иногда полезно уметь обращаться к переменной (например, число между 1 и 1000 для 
переменных v), номер которой записан в другой переменной. В этом случае вы 
можете использовать повторение функции как в ресивере DO для записи информации 
в переменную. Взамен вставки номера после <i>v</i>, вы можете вставить другую 
переменную и значение, сохранённое в ней, будет номером переменной.<br>
Пример индексных <i>v</i>-переменных, используя <i>y</i>-переменные:
<script type="erm">!!VRy10:S7;
!!VRvy10:S5;
!!IF:M^Значение переменной v7 равно %V7.^;</script>
Будет показано следующее сообщение:<br>
<blockquote id="T0"><table><tr><td id="dl">Значение переменной v7 равно 5.</td></tr></table></blockquote>
Это потому, что y10 равно 7. И vy10 значит, что <i>v</i>-переменная имеет номер, 
сохранённый в переменной y10, которая имеет значение 7. Следовательно, v7 
становится равной 5.</p>

<h3><a name="macros"></a>Макросы</h3><p>
Если вы хотите обращаться к переменной по более значимому имени, вы можете 
установить макрос ресивером MC. Макрос может быть использован почти в любом 
месте, где используется переменная и взаимодействует с переменной.<br>
Макрос - это ссылка с именем, ограниченная знаками доллара: $treasure$.<br>
Для большей информации по макросам см. <a href="../Rec/MC.htm">ресивер MC</a>.<p>
<b>Руководство по использованию переменных<p>
</b>Вы можете использовать любую комбинацию номеров переменных в вашем скрипте, 
но желательней использовать переменные из какого-либо промежутка, чтобы затем 
можно было применять скрипт к карте без страха перекрытия переменных друг другом 
(естественно, вы будете знать, какие использовали в скрипте, и сможете изменить 
их при возникновении неполадок). Также рекомендуется для временных данных 
(нужных только в данном триггере) использовать быстрые переменные, а для 
долговременных - обычные глобальные. Кроме того, неплохо использовать 
<i>y</i>-переменные в функции, так освобождается больше обычных переменных для вашего 
скрипта. Переменные героя (<i>w</i>) будут полезны только для специальных нужд, нет 
нужды записывать в них какие-либо долгосрочные данные, если они не нужны самому 
герою (т.е. скрипт будет действовать не только на героя).</p>

<h4>Использование <i>y</i>-переменных вне функций</h3>
<p>Есть сто <i>y</i>-переменных [1..100]. Вы можете использовать их почти везде. Но 
каждый триггер функции сохраняет все текущие значения <i>y</i>-переменных в специальных слотах, 
сбрасывая их на 0, и после выполнения последнего ресивера восстанавливает их обратно.</p>
<u>Пример</u>:
<script type="erm">ZVSE
!#VRy15:S3;
...
!?...;
!!IF:M^%Y15^; покажется 3
...
!!FU234:P;

!!IF:M^%Y15^; покажется 3
...
!?FU234;
!!IF:M^%Y15^; покажется 0
!!VRy15:S5;
!!IF:M^%Y15^; покажется 5
!?FU234;
!!IF:M^%Y15^; покажется 0
!!VRy15:S7;
!!IF:M^%Y15^; покажется 7</script>

<h3><a name="add"></a>Дополнительные примеры:</h3>
<p id="Q1"><i id="bold">Как использовать переменные героя?</i></p>
<p>Для использования <i>w</i>-переменных, сперва вы должны использовать команду !!IF для 
героя, у которого хотите изменять или узнать (используйте -1 для текущего 
героя). Использовав эту команду, все <i>w</i>-переменные далее ищутся у указанного 
героя до тех пор, пока вы не смените героя. Используйте эту команду перед 
установкой, тестированием или проверкой <i>w</i>-переменных. Так, если вам нужно 
использовать <i>w</i>-переменные героя #147 (Дракон), команда будет такова:
<script type="erm">!!IF:W147;</script>
Тогда вы сможете установить переменную w1 в точности так же, как и любую другую переменную (см. пример ниже).<p>
Вы имеете 1 объект и 1 событие. Если герой посетил объект, событие среагирует должным образом.<br>
Поставим объект Волшебный колодец в позицию 10/15/0.<br>
Поставим событие в 27/18/0.
<script type="erm">ZVSE
!?OB10/15/0;
!!IF:W-1;
!!VRw1:S1;

!?LE27/18/0;
!!IF:W-1;
!!IF&w1=0:M^Принесите мне воды из волшебного колодца!^;
!!IF&w1=1:M^Вы принесли мне воды! Я отблагодарю вас!^;</script></p>
<p id="Q1"><i id="bold">Как я могу узнать номер текущего дня?</i></p>
<p>Это просто.
<script type="erm">!!VRv123:Sc;</script>
Модификатор &quot;с&quot; работает так же, как и &quot;d&quot;, но добавляет текущий день.<br>
Вы можете добавлять текущий день к любым другим значениям.
<script type="erm">!!HE-1:Fcd/c/1/2;</script>
Добавить к атаке текущего героя номер текущего дня, установить защиту равную 
номеру текущего дня.<br>
<i id="bold">Замечание:</i> <i>c</i> - это НЕ переменная, вы не можете установить, проверить или получить в неё значение. 
Если вы хотите проверить номер дня, запомните её в другую переменную.<br>
<u>Пример</u>:
<script type="erm">Это работать не будет:
!!VRy-1&c<=217:S0;
!!VRy-1&c>217:S1;

А это - будет:
!!VRy-50:Sc;
!!VRy-1&y-50<=217:S0;
!!VRy-1&y-50>217:S1;
</script></p>
<p id="Q1"><i id="bold">Подсказка о генерации случайного значения</i></p>
<p>Давайте поговорим о генерировании чисел от 1-100, но кроме 42, 81 или 99.<br>
Здесь три ненужных номера, так что генерируется число от 1 до 97.<br>
Затем, если это 42 или выше, добавляем 1. Далее, если это 81 или выше, добавляем 1. 
Если это 99 или выше, добавляем 1.<br>
Вы теперь имеете случайное значение, от 1 до 100, но кроме 42, 81, или 99.</p>
<p>Так, если вы хотите генерировать число от 1 до 100, исключая 10..19 и 73, вы 
генерируете число от 1 до 89, затем, если оно 10 или выше, добавляете 10, если 
73 или выше, добавляете 1.</p><p>См. также:<br>
<a target="main" href="TriggerSol.htm">Триггеры: общая информация</a><br>
<a target="main" href="ReceiverSol.htm">Ресиверы: общая информация</a><br>
</p>
</div>
<script src="../erm.js"></script></body></html>